ASV_ITS2 <- ASV_ITS2[,-1]
# Step 1: Extract the phylum names from the column names
class_names <- sub("\\..*", "", colnames(ASV_ITS2))  # Remove everything after the first dot
# Step 2: Transpose the ASV table and add the phylum names as column names
ASV_ITS2_t <- t(ASV_ITS2)
# Step 3: Convert to a data frame for easier manipulation
ASV_ITS2_df <- as.data.frame(ASV_ITS2_t)
# Step 4: Add the phylum names as a new column for aggregation
ASV_ITS2_df$Class <- class_names
# Step 5: Summarize the ASV data by phylum (i.e., sum ASVs with the same phylum)
ASV_ITS2_grouped <- ASV_ITS2_df %>%
group_by(Class) %>%
summarise(across(everything(), sum))%>%
as.data.frame()
# Step 6: Transpose the result back to the original shape
ASV_ITS2_grouped <- t(ASV_ITS2_grouped)
ASV_ITS2_grouped <- as.data.frame(ASV_ITS2_grouped)
colnames(ASV_ITS2_grouped) <- ASV_ITS2_grouped[1,]
ASV_ITS2_grouped <- ASV_ITS2_grouped[-1,]
# Convert all character columns to numeric
ASV_ITS2_grouped <- ASV_ITS2_grouped %>%
mutate(across(everything(), ~as.numeric(trimws(.))))
# Based on the barplot figure with the class abundances of > 1%, I remove
# manually the class (columns) that I am not interested with.
ASV_ITS2_grouped_clean <- ASV_ITS2_grouped %>%
select(Agaricomycetes, Dothideomycetes, Eurotiomycetes,
Fungi_cls_Incertae_sedis, Geminibasidiomycetes,
Geoglossomycetes, Lecanoromycetes, Leotiomycetes,
Microbotryomycetes, Mortierellomycetes,
Mucoromycetes, Mucoromycotina_cls_Incertae_sedis,
Pezizomycetes, Pezizomycotina_cls_Incertae_sedis,
Rozellomycota_cls_Incertae_sedis, Rozellomycotina_cls_Incertae_sedis,
Saccharomycetes, Sordariomycetes, Tremellomycetes,
Umbelopsidomycetes, `NA`)
rm(ASV_ITS2_grouped, ASV_ITS2, ASV_ITS2_df, ASV_ITS2_t)
ASV_ITS2_grouped_clean <- ASV_ITS2_grouped_clean %>%
rename("Fungi (Incertae sedis)" = Fungi_cls_Incertae_sedis,
"Mucoromycotina (Incertae sedis)" = Mucoromycotina_cls_Incertae_sedis,
"Pezizomycotina (Incertae sedis)" = Pezizomycotina_cls_Incertae_sedis,
"Rozellomycota (Incertae sedis)" = Rozellomycota_cls_Incertae_sedis,
"Rozellomycotina (Incertae sedis)" = Rozellomycotina_cls_Incertae_sedis,
"Others" = `NA`)
#Standardazing (scale) for env and func, and hellinger distance for ASVs
env_s <- scale(env)
func_s <- scale(func)
func2_s <- scale(func2)
# prok_h <- decostand(ASV_16S, method = "hellinger")
prok_h <- decostand(ASV_16S_grouped_clean, method = "hellinger")
ITS2_h <- decostand(ASV_ITS2_grouped_clean, method = "hellinger")
View(env_s)
rm(list = ls())
my_data <- read.csv("SP_metadata_2021.csv", sep=";")
my_data$aridity <- (1- my_data$AI)
#To replace NA values with a mean of the other values of the Site:
for (i in which(sapply(my_data, is.numeric))) {
for (j in which(is.na(my_data[, i]))) {
my_data[j, i] <- mean(my_data[my_data[, "Site"] == my_data[j, "Site"], i],  na.rm = TRUE)
}
}
colnames(my_data)[colnames(my_data) == "alpha"] <- "ALPHA"
colnames(my_data)[colnames(my_data) == "beta"] <- "BETA"
colnames(my_data)[colnames(my_data) == "xyl"] <- "XYL"
colnames(my_data)[colnames(my_data) == "cbh"] <- "CBH"
colnames(my_data)[colnames(my_data) == "gla"] <- "NAG"
colnames(my_data)[colnames(my_data) == "fos"] <- "PHOS"
colnames(my_data)[colnames(my_data) == "leu"] <- "LEU"
colnames(my_data)[colnames(my_data) == "phe"] <- "PHE"
colnames(my_data)[colnames(my_data) == "aridity"] <- "Aridity"
colnames(my_data)[colnames(my_data) == "Name"] <- "Sample.name"
my_data <- my_data %>%
mutate(Site = case_when(
Site == "SP01" ~ "ATK",
Site == "SP02" ~ "LHE",
Site == "SP03" ~ "GAV",
Site == "SP04" ~ "COY",
Site == "SP05" ~ "TAB",
Site == "SP06" ~ "VAL",
Site == "SP07" ~ "ARZ",
Site == "SP08" ~ "FDE",
Site == "SP09" ~ "SAN",
Site == "SP10" ~ "MAL",
Site == "SP11" ~ "MON",
Site == "SP12" ~ "ALB",
TRUE ~ NA_character_  # In case there are other values not listed above
))
func <- my_data[,c(2,3,40,41,46:53,64,93)]
ASV_16S <- read_excel("ASV_table_16S_phylum.xlsx")
ASV_ITS2 <- read_excel("ASV_table_ITS2_class.xlsx")
clima <- my_data[,c(2,3,93,5,6,76)]
soil_char <- my_data[,c(2,8:10,12:13,17:23,27:30,33:34,79:92)]
veg <- my_data[,c(2,77)]
View(clima)
View(veg)
View(soil_char)
env <- cbind(clima, veg)
env <- cbind(env, soil_char)
View(env)
env <- env[,-c(7,9)]
rm(clima, soil_char, veg,my_data)
ASV_16S <- merge(ASV_16S, env[, c("Sample.name", "Aridity")], by = "Sample.name", all.x = TRUE)
ASV_16S <- ASV_16S[, c("Sample.name", "Aridity", setdiff(names(ASV_16S), c("Sample.name", "Aridity")))]
ASV_ITS2 <- merge(ASV_ITS2, env[, c("Sample.name", "Aridity")], by = "Sample.name", all.x = TRUE)
ASV_ITS2 <- ASV_ITS2[, c("Sample.name", "Aridity", setdiff(names(ASV_ITS2), c("Sample.name", "Aridity")))]
View(env)
## Functions ----
func <- func[order(func$Aridity), ]
func$rep <- sub(".*(-\\w)", "\\1\\2", func$Sample.name)
func <- func[, c("rep", setdiff(names(func), "rep"))]
func$Site.rep <- paste(func$Site, func$rep, sep = "")
func <- func[, c("Site.rep", setdiff(names(func), "Site.rep"))]
func <- func[,-c(2:4,16)]
rownames(func) <- func$Site.rep
func <- func[,-1]
# Functions WITHOUT BIOMASS:
func2 <- func[,-c(1:2)]
env$rep <- sub(".*(-\\w)", "\\1\\2", env$Sample.name)
env <- env[, c("rep", setdiff(names(env), "rep"))]
env$Site.rep <- paste(env$Site, env$rep, sep = "")
env <- env[, c("Site.rep", setdiff(names(env), "Site.rep"))]
env <- env[,-c(2:4)]
rownames(env) <- env$Site.rep
env <- env[,-1]
env <- env[order(env$Aridity), ]
env <- env %>%
rename("Soil Temperature" = Soil_Temp,
"Water activity" = Water_activity,
"Water content" = Water_content,
"C/N" = C_N)
## 16S ----
ASV_16S$Site <- sub(".*-(SP)(\\d+).*", "\\1\\2", ASV_16S$Sample.name)  # First extract the part
ASV_16S$Site <- ifelse(as.numeric(gsub("SP", "", ASV_16S$Site)) < 10,
sub("SP(\\d+)", "SP0\\1", ASV_16S$Site),
ASV_16S$Site)
ASV_16S <- ASV_16S[, c("Site", setdiff(names(ASV_16S), "Site"))]
ASV_16S <- ASV_16S %>%
mutate(Site = case_when(
Site == "SP01" ~ "ATK",
Site == "SP02" ~ "LHE",
Site == "SP03" ~ "GAV",
Site == "SP04" ~ "COY",
Site == "SP05" ~ "TAB",
Site == "SP06" ~ "VAL",
Site == "SP07" ~ "ARZ",
Site == "SP08" ~ "FDE",
Site == "SP09" ~ "SAN",
Site == "SP10" ~ "MAL",
Site == "SP11" ~ "MON",
Site == "SP12" ~ "ALB",
TRUE ~ NA_character_  # In case there are other values not listed above
))
ASV_16S$rep <- sub(".*(-\\w)", "\\1\\2", ASV_16S$Sample.name)
ASV_16S <- ASV_16S[, c("rep", setdiff(names(ASV_16S), "rep"))]
ASV_16S$Site.rep <- paste(ASV_16S$Site, ASV_16S$rep, sep = "")
ASV_16S <- ASV_16S[, c("Site.rep", setdiff(names(ASV_16S), "Site.rep"))]
ASV_16S <- ASV_16S[order(ASV_16S$Aridity), ]
ASV_16S <- ASV_16S[,-c(2:5)]
ASV_16S <- as.data.frame(ASV_16S)
# rownames(ASV_16S) <- ASV_16S$Sample.name
rownames(ASV_16S) <- ASV_16S$Site.rep
ASV_16S <- ASV_16S[,-1]
# Step 1: Extract the phylum names from the column names
phylum_names <- sub("\\..*", "", colnames(ASV_16S))  # Remove everything after the first dot
# Step 2: Transpose the ASV table and add the phylum names as column names
ASV_16S_t <- t(ASV_16S)
# Step 3: Convert to a data frame for easier manipulation
ASV_16S_df <- as.data.frame(ASV_16S_t)
# Step 4: Add the phylum names as a new column for aggregation
ASV_16S_df$Phylum <- phylum_names
# Step 5: Summarize the ASV data by phylum (i.e., sum ASVs with the same phylum)
ASV_16S_grouped <- ASV_16S_df %>%
group_by(Phylum) %>%
summarise(across(everything(), sum))%>%
as.data.frame()
# Step 6: Transpose the result back to the original shape
ASV_16S_grouped <- t(ASV_16S_grouped)
ASV_16S_grouped <- as.data.frame(ASV_16S_grouped)
colnames(ASV_16S_grouped) <- ASV_16S_grouped[1,]
ASV_16S_grouped <- ASV_16S_grouped[-1,]
# Convert all character columns to numeric
ASV_16S_grouped <- ASV_16S_grouped %>%
mutate(across(everything(), ~as.numeric(trimws(.))))
# Based on the barplot figure with the phylum abundances of > 1%, I remove
# manually the phylumns (columns) that I am not interested with.
ASV_16S_grouped_clean <- ASV_16S_grouped %>%
select(Acidobacteriota, Actinobacteriota, Chloroflexi,
Crenarchaeota, Cyanobacteria, Firmicutes,
Gemmatimonadota, Myxococcota, Patescibacteria,
Planctomycetota, Proteobacteria, Verrucomicrobiota,
`WPS-2`)
ASV_16S_grouped_clean <- ASV_16S_grouped_clean %>%
rename(
Actinomycetota = Actinobacteriota,
Chloroflexota = Chloroflexi,
Pseudomonadota = Proteobacteria,
Bacillota = Firmicutes,
Thermoproteota = Crenarchaeota
)
rm(ASV_16S_grouped, ASV_16S, ASV_16S_df, ASV_16S_t)
ASV_ITS2$Site <- sub(".*-(SP)(\\d+).*", "\\1\\2", ASV_ITS2$Sample.name)  # First extract the part
ASV_ITS2$Site <- ifelse(as.numeric(gsub("SP", "", ASV_ITS2$Site)) < 10,
sub("SP(\\d+)", "SP0\\1", ASV_ITS2$Site),
ASV_ITS2$Site)
ASV_ITS2 <- ASV_ITS2[, c("Site", setdiff(names(ASV_ITS2), "Site"))]
ASV_ITS2 <- ASV_ITS2 %>%
mutate(Site = case_when(
Site == "SP01" ~ "ATK",
Site == "SP02" ~ "LHE",
Site == "SP03" ~ "GAV",
Site == "SP04" ~ "COY",
Site == "SP05" ~ "TAB",
Site == "SP06" ~ "VAL",
Site == "SP07" ~ "ARZ",
Site == "SP08" ~ "FDE",
Site == "SP09" ~ "SAN",
Site == "SP10" ~ "MAL",
Site == "SP11" ~ "MON",
Site == "SP12" ~ "ALB",
TRUE ~ NA_character_  # In case there are other values not listed above
))
ASV_ITS2$rep <- sub(".*(-\\w)", "\\1\\2", ASV_ITS2$Sample.name)
ASV_ITS2 <- ASV_ITS2[, c("rep", setdiff(names(ASV_ITS2), "rep"))]
ASV_ITS2$Site.rep <- paste(ASV_ITS2$Site, ASV_ITS2$rep, sep = "")
ASV_ITS2 <- ASV_ITS2[, c("Site.rep", setdiff(names(ASV_ITS2), "Site.rep"))]
ASV_ITS2 <- ASV_ITS2[order(ASV_ITS2$Aridity), ]
ASV_ITS2 <- ASV_ITS2[,-c(2:5)]
ASV_ITS2 <- as.data.frame(ASV_ITS2)
rownames(ASV_ITS2) <- ASV_ITS2$Site.rep
ASV_ITS2 <- ASV_ITS2[,-1]
# Step 1: Extract the phylum names from the column names
class_names <- sub("\\..*", "", colnames(ASV_ITS2))  # Remove everything after the first dot
# Step 2: Transpose the ASV table and add the phylum names as column names
ASV_ITS2_t <- t(ASV_ITS2)
# Step 3: Convert to a data frame for easier manipulation
ASV_ITS2_df <- as.data.frame(ASV_ITS2_t)
# Step 4: Add the phylum names as a new column for aggregation
ASV_ITS2_df$Class <- class_names
# Step 5: Summarize the ASV data by phylum (i.e., sum ASVs with the same phylum)
ASV_ITS2_grouped <- ASV_ITS2_df %>%
group_by(Class) %>%
summarise(across(everything(), sum))%>%
as.data.frame()
# Step 6: Transpose the result back to the original shape
ASV_ITS2_grouped <- t(ASV_ITS2_grouped)
ASV_ITS2_grouped <- as.data.frame(ASV_ITS2_grouped)
colnames(ASV_ITS2_grouped) <- ASV_ITS2_grouped[1,]
ASV_ITS2_grouped <- ASV_ITS2_grouped[-1,]
# Convert all character columns to numeric
ASV_ITS2_grouped <- ASV_ITS2_grouped %>%
mutate(across(everything(), ~as.numeric(trimws(.))))
# Based on the barplot figure with the class abundances of > 1%, I remove
# manually the class (columns) that I am not interested with.
ASV_ITS2_grouped_clean <- ASV_ITS2_grouped %>%
select(Agaricomycetes, Dothideomycetes, Eurotiomycetes,
Fungi_cls_Incertae_sedis, Geminibasidiomycetes,
Geoglossomycetes, Lecanoromycetes, Leotiomycetes,
Microbotryomycetes, Mortierellomycetes,
Mucoromycetes, Mucoromycotina_cls_Incertae_sedis,
Pezizomycetes, Pezizomycotina_cls_Incertae_sedis,
Rozellomycota_cls_Incertae_sedis, Rozellomycotina_cls_Incertae_sedis,
Saccharomycetes, Sordariomycetes, Tremellomycetes,
Umbelopsidomycetes, `NA`)
rm(ASV_ITS2_grouped, ASV_ITS2, ASV_ITS2_df, ASV_ITS2_t)
ASV_ITS2_grouped_clean <- ASV_ITS2_grouped_clean %>%
rename("Fungi (Incertae sedis)" = Fungi_cls_Incertae_sedis,
"Mucoromycotina (Incertae sedis)" = Mucoromycotina_cls_Incertae_sedis,
"Pezizomycotina (Incertae sedis)" = Pezizomycotina_cls_Incertae_sedis,
"Rozellomycota (Incertae sedis)" = Rozellomycota_cls_Incertae_sedis,
"Rozellomycotina (Incertae sedis)" = Rozellomycotina_cls_Incertae_sedis,
"Others" = `NA`)
#Standardazing (scale) for env and func, and hellinger distance for ASVs
env_s <- scale(env)
func_s <- scale(func)
func2_s <- scale(func2)
# prok_h <- decostand(ASV_16S, method = "hellinger")
prok_h <- decostand(ASV_16S_grouped_clean, method = "hellinger")
ITS2_h <- decostand(ASV_ITS2_grouped_clean, method = "hellinger")
# Capscale model
cap6 <- capscale(func2_s ~ ., data = data.frame(env_s))
summary(cap6)
R2 <- RsquareAdj(cap6)$r.squared
R2
R2adj <- RsquareAdj(cap6)$adj.r.squared
R2adj
anova.cca(cap6, permutations = how(nperm = 10000))
anova.cca(cap6, by = "axis", permutations = how(nperm = 1000))
# Plotting
plot(cap6, scaling=2, main='Triplot - scaling 2')
summary(cap6)
# Scores extraction
func2_s_scores <- vegan::scores(cap6, display = "bp")
func2_s_scores_df <- as.data.frame(func2_s_scores)
rm(func2_s_scores)
site_scores <- vegan::scores(cap6, display = "sites")
site_scores_df <- as.data.frame(site_scores)
rm(site_scores)
site_scores_df$SiteRowNames <- rownames(site_scores_df)
site_scores_df$Site <- rownames(site_scores_df)
site_scores_df <- site_scores_df %>%
tidyr::separate(Site, into = c("Site", "Replicate"), sep = "-")
AI_df <- data.frame(
Site = c("FDE", "ATK", "LHE", "ARZ", "VAL", "GAV", "ALB", "MON", "COY", "MAL", "SAN", "TAB"),
AI = c(1.33, 1.25, 1.09, 1.00, 0.70, 0.56, 0.43, 0.40, 0.25, 0.18, 0.18, 0.16)
)
site_scores_df <- dplyr::left_join(site_scores_df, AI_df, by = "Site")
rm(AI_df)
rownames(site_scores_df) <- site_scores_df$SiteRowNames
site_scores_df$Aridity <- (1 - site_scores_df$AI)
site_scores_df <- site_scores_df[,-c(3,5:6)]
species_scores <- vegan::scores(cap6, display = "species")
species_scores_df <- as.data.frame(species_scores)
species_scores_df$var <- rownames(species_scores_df)
rm(species_scores)
# ggplot visualization
ggplot() +
geom_point(data = site_scores_df,
aes(x = CAP1, y = CAP2, color = Aridity),
size = 3, show.legend = TRUE) +
geom_text(data = site_scores_df,
aes(x = CAP1, y = CAP2, label = Site),
size = 3, color = "#404040",
nudge_y = -0.12,
nudge_x = 0.01) +
geom_segment(data = func2_s_scores_df,
aes(x = 0, y = 0, xend = CAP1, yend = CAP2),
arrow = arrow(length = unit(0.2, "inches")),
color = "blue") +
geom_text_repel(data = func2_s_scores_df,
aes(x = CAP1, y = CAP2, label = rownames(func2_s_scores_df)),
size = 4, color = "blue",
fontface = "bold") +
geom_text_repel(data = species_scores_df,
aes(x = CAP1, y = CAP2, label = var),
size = 4, color = "darkred", vjust = -1,
fontface = "bold") +
scale_color_AI(discrete = FALSE, palette = "Sites", reverse = FALSE, name = "Aridity") +
xlab("CAP1") + ylab("CAP2") +
theme_minimal()
# ***** ANNA DOMÉNECH-PASCUAL ***********************************************************
# ***** HOW TO PERSONALIZE AND CREATE YOUR OWN PALETTE (CONTINUOUS AND DISCRETE) ********
# ***** Created on september 2023 *******************************************************
# SOURCE:
# https://cano-barbacil.wixsite.com/canobarbacil/post/create-your-own-color-palette-in-r
library(ggpubr)
library(scales)
library(ggplot2)
mycolors<-c(
'darkblue' = "#427681",
'blue'="#3891A6",
'darkgreen'="#9BBC79",
'green'="#CCD263",
'yellow'="#E5DD58",
'gold'= "#FDE74C",
'orange'="#EC9E57",
'pink'="#E3655B",
'pink3'="#DB5461",
'red'="#D84652",
'darkred'="#7D1809",
'black'="#290500")
show_col(mycolors)
mycols <- function(...) {
cols <- c(...)
if (is.null(cols))
return (mycolors)
mycolors[cols]
}
mypalettes <- list(
'Sites' = mycols("darkblue","blue","darkgreen",
"green", "yellow", "gold",
"orange","pink","pink3",
"red","black")
)
AI_pal <- function(palette = "Sites", reverse = TRUE, ...) {
pal <- mypalettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
AI_pal("Sites")
colors <- AI_pal("Sites")(12)
colors
show_col(colors)
scale_color_AI <- function(palette = "main", discrete = TRUE, reverse = TRUE, ...) {
pal <- AI_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("AI_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
scale_fill_AI <- function(palette = "main", discrete = TRUE, reverse = TRUE, ...) {
pal <- AI_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("fill", paste0("AI_", palette), palette = pal, ...)
} else {
scale_fill_gradientn(colours = pal(256), ...)
}
}
# prova <- ggplot(iris,
#                aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
#   geom_point(size = 2, alpha = 1) +
#   scale_color_AI(discrete = FALSE, palette = "Sites")+
#   ggtitle("Intentant crear una palette continua")+theme_test()+ theme(legend.position = "right")
# prova
#
# # If this error appears:
# # Error in interpolate(x, colors[, 1L]) :
# # need at least two non-NA values to interpolate
# # It is because an incorrecte name in "palette" argument in scale_color_AI
#
#
#
#
# #----------------------------------------
# # For translocation (5 sites):
#
#
# mycolors<-c(
#   'darkblue' = "#427681",
#   'darkgreen'="#9BBC79",
#   'gold'= "#FDE74C",
#   'pink3'="#DB5461",
#   'black'="#290500")
# show_col(mycolors)
#
# mycols <- function(...) {
#   cols <- c(...)
#   if (is.null(cols))
#     return (mycolors)
#   mycolors[cols]
# }
#
# mypalettes <- list(
#   'Sites' = mycols("darkblue","darkgreen",
#                     "gold",
#                  "pink3","black")
# )
#
#
# AI_pal <- function(palette = "Sites", reverse = TRUE, ...) {
#   pal <- mypalettes[[palette]]
#   if (reverse) pal <- rev(pal)
#   colorRampPalette(pal, ...)
# }
#
# AI_pal("Sites")
#
#
# colors <- AI_pal("Sites")(5)
# colors
# show_col(colors)
#
#
# scale_color_AI <- function(palette = "main", discrete = TRUE, reverse = TRUE, ...) {
#   pal <- AI_pal(palette = palette, reverse = reverse)
#
#   if (discrete) {
#     discrete_scale("colour", paste0("AI_", palette), palette = pal, ...)
#   } else {
#     scale_color_gradientn(colours = pal(256), ...)
#   }
# }
#
#
# scale_fill_AI <- function(palette = "main", discrete = TRUE, reverse = TRUE, ...) {
#   pal <- AI_pal(palette = palette, reverse = reverse)
#
#   if (discrete) {
#     discrete_scale("fill", paste0("AI_", palette), palette = pal, ...)
#   } else {
#     scale_fill_gradientn(colours = pal(256), ...)
#   }
# }
#
#
#
# prova <- ggplot(iris,
#                 aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
#   geom_point(size = 2, alpha = 1) +
#   scale_color_AI(discrete = FALSE, palette = "Sites")+
#   ggtitle("Intentant crear una palette continua")+theme_test()+ theme(legend.position = "right")
# prova
#
# # If this error appears:
# # Error in interpolate(x, colors[, 1L]) :
# # need at least two non-NA values to interpolate
# # It is because an incorrecte name in "palette" argument in scale_color_AI
#
#
# ggplot visualization
ggplot() +
geom_point(data = site_scores_df,
aes(x = CAP1, y = CAP2, color = Aridity),
size = 3, show.legend = TRUE) +
geom_text(data = site_scores_df,
aes(x = CAP1, y = CAP2, label = Site),
size = 3, color = "#404040",
nudge_y = -0.12,
nudge_x = 0.01) +
geom_segment(data = func2_s_scores_df,
aes(x = 0, y = 0, xend = CAP1, yend = CAP2),
arrow = arrow(length = unit(0.2, "inches")),
color = "blue") +
geom_text_repel(data = func2_s_scores_df,
aes(x = CAP1, y = CAP2, label = rownames(func2_s_scores_df)),
size = 4, color = "blue",
fontface = "bold") +
geom_text_repel(data = species_scores_df,
aes(x = CAP1, y = CAP2, label = var),
size = 4, color = "darkred", vjust = -1,
fontface = "bold") +
scale_color_AI(discrete = FALSE, palette = "Sites", reverse = FALSE, name = "Aridity") +
xlab("CAP1") + ylab("CAP2") +
theme_minimal()
