breaks=c('SP08', 'SP01', 'SP02','SP07',
'SP06', 'SP03','SP12','SP11',
'SP04','SP09','SP10','SP05'))+
geom_point(aes(fill=site), colour= "black", pch=21, size = 6)+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=15))+
ggtitle("Physicochemical variables")+
theme(plot.title = element_text(color="black", size=17, face="bold.italic"))+
theme(plot.title = element_text(hjust = 0.5))+
theme(legend.title=element_blank())+
theme(legend.text = element_text(size=15))
all_plot
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
scale_fill_manual(values = mycolors2)+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
library(ggfortify)
library(ggplot2)
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
scale_fill_manual(values = mycolors2)+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
View(data_mit2)
View(data_mit)
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(aes(color=site), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
scale_color_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(colour= "black", pch=21, size = 5)+
scale_color_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE)+
theme_classic()+
geom_point(pch=21, size = 5)+
scale_color_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = pca_data$AI)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = pca_data$AI)+
theme_classic()+
geom_point(aes(fill=site), colour= "black", pch=21, size = 5)+
scale_color_AI(discrete = FALSE, palette = "Sites")+
ggtitle("All response variables")+
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = pca_data$AI)+
plot.theme1+
geom_point(aes(fill=AI), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("Functional response variables")+
geom_text(aes(label = scores$Site), size = 4, hjust = 1.5) +
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))+
scale_x_continuous(expand = c(0.1, 0.1))
# PCA physicochemical selected vars.----
data <- my_data[,c(2, 7, 76, 13, 18,20:23,28,30,33,34,86,92)]
for (i in which(sapply(data, is.numeric))) {
for (j in which(is.na(data[, i]))) {
data[j, i] <- mean(data[data[, "Site"] == data[j, "Site"], i],  na.rm = TRUE)
}
}
library(dplyr)
data <- rename(data,
CN = C_N,
LTC = L_TC,
LTN = L_TN,
Altitude = altitude)
data2 <- data[,c(-1)]
View(data2)
#By means:
data_mit <- data %>%
group_by(Site) %>%
summarise_all("mean")
data_mit2 <- data_mit[,-c(1:2)]
site <- data_mit[,1]
site <- site$Site
site <- factor(site, levels = site)
all <- prcomp(na.omit(data_mit2), center = TRUE,
scale. = TRUE)
plot(all, type = "l")
plot(all)
summary(all)
library(ggfortify)
library(ggplot2)
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = pca_data$AI)+
plot.theme1+
geom_point(aes(fill=AI), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("Functional response variables")+
geom_text(aes(label = scores$Site), size = 4, hjust = 1.5) +
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))+
scale_x_continuous(expand = c(0.1, 0.1))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = data_mit$AI)+
plot.theme1+
geom_point(aes(fill=AI), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("Functional response variables")+
geom_text(aes(label = scores$Site), size = 4, hjust = 1.5) +
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))+
scale_x_continuous(expand = c(0.1, 0.1))
data_mit$AI
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = data_mit$AI)+
plot.theme1+
geom_point(aes(fill=data_mit$AI), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("Functional response variables")+
geom_text(aes(label = scores$Site), size = 4, hjust = 1.5) +
theme(legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))+
scale_x_continuous(expand = c(0.1, 0.1))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = data_mit$AI)+
plot.theme1+
geom_point(aes(fill=data_mit$AI), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("Physicochemical variables")+
geom_text(aes(label = scores$Site), size = 4, hjust = 1.5) +
theme(legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))+
scale_x_continuous(expand = c(0.1, 0.1))
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = data_mit$AI)+
plot.theme1+
geom_point(aes(fill=data_mit$AI), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("Physicochemical variables")+
geom_text(aes(label = scores$Site), size = 4, hjust = 1.5) +
theme(legend.position="right",
legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))+
scale_x_continuous(expand = c(0.1, 0.1))
# PCA physicochemical selected vars.----
data <- my_data[,c(2, 7, 76, 13, 18,20:23,28,30,33,34,86,92)]
for (i in which(sapply(data, is.numeric))) {
for (j in which(is.na(data[, i]))) {
data[j, i] <- mean(data[data[, "Site"] == data[j, "Site"], i],  na.rm = TRUE)
}
}
library(dplyr)
data <- rename(data,
CN = C_N,
LTC = L_TC,
LTN = L_TN,
Altitude = altitude)
data2 <- data[,c(-1)]
#By means:
data_mit <- data %>%
group_by(Site) %>%
summarise_all("mean")
data_mit2 <- data_mit[,-c(1:2)]
site <- data_mit[,1]
site <- site$Site
site <- factor(site, levels = site)
all <- prcomp(na.omit(data_mit2), center = TRUE,
scale. = TRUE)
plot(all, type = "l")
plot(all)
summary(all)
library(ggfortify)
library(ggplot2)
autoplot(all, data=data_mit2,
loadings = TRUE, loadings.colour = 'brown',
loadings.label.colour='brown', loadings.label = TRUE,
loadings.label.size = 7,
loadings.label.repel=TRUE,
color = data_mit$AI)+
plot.theme1+
geom_point(aes(fill=data_mit$AI), colour= "black", pch=21, size = 5)+
scale_fill_AI(discrete = FALSE, palette = "Sites")+
ggtitle("Physicochemical variables")+
geom_text(aes(label = scores$Site), size = 4, hjust = 1.5) +
theme(legend.position="right",
legend.title = element_blank(),
legend.text=element_text(size = 12),
title = element_text(size = 15,face="bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=15, face="plain"))+
scale_x_continuous(expand = c(0.1, 0.1))
ggsave(path = "Figures","PCA_fsca_selected.png", width = 10, height = 8, dpi = 300)
ggsave(path = "Figures/1 GRADIENT","PCA_fsca_selected.png", width = 10, height = 8, dpi = 300)
# Parameter ranking plot ----
#Change the signs of the variables
dominance_output <- domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)") # Replace with your actual function
my_data         = read.csv("SP_metadata_2021.csv", sep=";")
my_data$LTC_LTN <- my_data$L_TC/my_data$L_TN
my_data$xylcbh <- my_data$xyl + my_data$cbh
my_data$alphabeta <- my_data$alpha + my_data$beta
#To replace NA values with a mean of the other values of the Site:
for (i in which(sapply(my_data, is.numeric))) {
for (j in which(is.na(my_data[, i]))) {
my_data[j, i] <- mean(my_data[my_data[, "Site"] == my_data[j, "Site"], i],  na.rm = TRUE)
}
}
a               = as.data.frame(colnames(my_data))
max_values      = apply(my_data[,c(8,10,13,20,22,30,76,81,82,83,85,92,21,23)],2,max)
my_data.1       = as.data.frame(cbind(my_data[,c(2,64,46,47,48,49,50,51,52,53,7,9,17,18,19,27,28,29,33,34,40,41,86,87,88,89,90,91,74)],
my_data[,c(8,10,13,20,22,30,76,81,82,83,85,92,21,23)] / as.list(max_values)))
a.1             = as.data.frame(colnames(my_data.1))
corr            = as.data.frame(cor(my_data.1[,12:43]))
# Parameters correlated: Water activity-water content; TOC-TN,FB,BB,TC;
# Sand-silt,clay; Peak_A-Peak_M, Peak_C; Peak_T-Peak_B; E2.E3-E3.E4
my_data.1 <-my_data.1 %>%
mutate(Cenz = select(., 3:6) %>% rowSums(na.rm = TRUE)) %>%
mutate(MB = select(.,21:22) %>% rowSums(na.rm = TRUE))
MB.full.I = lmer(MB ~ altitude+(TOC+Silt+Clay+L_TC+NH4+SO42+
L_TN+BIX+Soil_Temp+
Water_content+pH+PO43+Litter+
SR+E2.E3+FI+HIX+Peak_A+
Peak_T)*AI + (1|Site), data = my_data.1)
library("ggplot2")
library("scales")
library("tidyr")
library("dplyr")
library("ggpmisc")
library("ggpubr")
library("plotly")
library(plyr)
library(RColorBrewer)
library(devtools)
# install_github("vqv/ggbiplot")
library(ggbiplot)
library(vegan)
library(FSA)
library(rcompanion)
# New Liner mixed model ####
library(lme4)
library(car)
# remotes::install_version("MuMIn", "1.46.0")
library(MuMIn)
library(cAIC4)
library(domir)
MB.full.I = lmer(MB ~ altitude+(TOC+Silt+Clay+L_TC+NH4+SO42+
L_TN+BIX+Soil_Temp+
Water_content+pH+PO43+Litter+
SR+E2.E3+FI+HIX+Peak_A+
Peak_T)*AI + (1|Site), data = my_data.1)
isSingular(MB.full.I, tol = 1e-4)
summary(MB.full.I)
Anova(MB.full.I)
cAIC(MB.full.I)
AIC(MB.full.I)
r.squaredGLMM(MB.full.I)
qqnorm(residuals(MB.full.I))
scatter.smooth(residuals(MB.full.I) ~ fitted(MB.full.I))
MB.full.II = lmer(MB ~ (TOC+Clay+NH4+SO42+Water_content+PO43+Litter+SR+FI+
Peak_A)*AI + (1|Site), data = my_data.1)
isSingular(MB.full.II, tol = 1e-4)
summary(MB.full.II)
Anova(MB.full.II)
cAIC(MB.full.II)
AIC(MB.full.II)
r.squaredGLMM(MB.full.II)
qqnorm(residuals(MB.full.II))
scatter.smooth(residuals(MB.full.II) ~ fitted(MB.full.II))
MB.full.III = lmer(MB ~ TOC+Clay+NH4+Water_content+PO43+SR+FI+Peak_A+AI+
TOC:AI+SO42:AI+PO43:AI+SR:AI+Peak_A:AI+(1|Site), data = my_data.1)
isSingular(MB.full.III, tol = 1e-4)
summary(MB.full.III)
Anova(MB.full.III)
cAIC(MB.full.III)
AIC(MB.full.III)
r.squaredGLMM(MB.full.III)
qqnorm(residuals(MB.full.III))
scatter.smooth(residuals(MB.full.III) ~ fitted(MB.full.III))
MB.full.4 = lmer(MB ~ TOC+Clay+Water_content+SR+Peak_A+AI+
(1|Site), data = my_data.1)
isSingular(MB.full.4, tol = 1e-4)
summary(MB.full.4)
Anova(MB.full.4)
cAIC(MB.full.4)
AIC(MB.full.4)
r.squaredGLMM(MB.full.4)
qqnorm(residuals(MB.full.4))
scatter.smooth(residuals(MB.full.4) ~ fitted(MB.full.4))
domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)")
# Parameter ranking plot ----
#Change the signs of the variables
dominance_output <- domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)") # Replace with your actual function
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$Standardized
general_dominance_ranks <- dominance_output$Ranks
dominance_data <- data.frame(Standardized = general_dominance)
dominance_data$Ranks <- general_dominance_ranks
dominance_data <- dominance_data[order(dominance_data$Ranks), ]
# Extracting estimates from the summary output
estimates <- summary(MB.full.4)$coefficients[, "Estimate"][-1]  # Exclude intercept
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(dominance_data)
components <- data.frame(Variables = c("TOC","Clay","Water_content","SR","AI","Peak_A"))
aligned_dominance <- cbind(aligned_dominance, components)
# Reorder the levels of the 'Variables' column based on 'Standardized' values
aligned_dominance <- aligned_dominance %>%
arrange(Standardized)  # Arrange in descending order of 'Standardized'
# Convert 'Variables' to a factor with levels based on the ordered 'Variables'
aligned_dominance$Variables <- factor(aligned_dominance$Variables,
levels = aligned_dominance$Variables)
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables)) +
geom_bar(stat = "identity", fill = "royalblue", color = "black") +
labs(
y = "Predictor Variables",
x = "Standardized dominance"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("MB model") +
theme(legend.position = "none")  # Remove the legend
