lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)")
summary(MB.full.4)
domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)")
# Extracting estimates from the summary output
estimates <- summary(MB.full.4)$coefficients[, "Estimate"][-1]  # Exclude intercept
# Extracting General Dominance Standardized Ranks
general_dominance <- c(0.621674989, 0.203515609, 0.067177083, 0.006839040, 0.007397299, 0.006013620)  # Replace with your values
# Aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * general_dominance
# Displaying the aligned dominance values
aligned_dominance
dominance_output <- MB.full.4  # Replace with your actual function
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$General$StandardizedRanks
dominance_output$General
dominance_output$GeneralStandardizedRanks
dominance_output <- domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)") # Replace with your actual function
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$GeneralStandardizedRanks
# Extracting estimates from the summary output
estimates <- summary(MB.full.4)$coefficients[, "Estimate"][-1]  # Exclude intercept
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(general_dominance)
general_dominance
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$General$StandardizedRanks
view(dominance_output)
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$General$Standardized$Ranks
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$GeneralStandardizedRanks
dominance_output$Standardized
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$Standardized
# Extracting estimates from the summary output
estimates <- summary(MB.full.4)$coefficients[, "Estimate"][-1]  # Exclude intercept
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(general_dominance)
# Displaying the aligned dominance values
aligned_dominance
domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)")
estimates
general_dominance_ranks <- dominance_output$Ranks
general_dominance_ranks
dominance_data <- data.frame(Standardized = general_dominance, Ranks = general_dominance_ranks)
dominance_data
# Order Standardized values based on Ranks
ordered_dominance <- dominance_data[order(dominance_data$Ranks), "Standardized"]
ordered_dominance
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(ordered_dominance)
aligned_dominance
domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)")
general_dominance_ranks <- dominance_output$Ranks
dominance_data <- data.frame(Standardized = general_dominance, Ranks = general_dominance_ranks)
dominance_data
dominance_data <- dominance_data[order(dominance_data$Ranks), ]
dominance_data
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(dominance_data)
# Displaying the aligned dominance values
aligned_dominance
domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)")
#CHANGE SIGN OF THE DOMINANCE VALUES
dominance_output <- domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)") # Replace with your actual function
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$Standardized
general_dominance_ranks <- dominance_output$Ranks
dominance_data <- dominance_data[order(dominance_data$Ranks), ]
# Extracting estimates from the summary output
estimates <- summary(MB.full.4)$coefficients[, "Estimate"][-1]  # Exclude intercept
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(dominance_data)
# Displaying the aligned dominance values
aligned_dominance
dominance_output$General_Dominance
domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)") # Replace with your actual function
dominance_output$Componence
components <- dominance_output$Components_of_sets
dominance_string <- dominance_output  # Replace with your actual dominance_output
# Splitting the string by lines and extracting components
components <- strsplit(dominance_string, "\n")[[1]]
dominance_string
# Splitting the string by lines and extracting components
components <- strsplit(dominance_string, "\n")[[1]]
# Displaying the aligned dominance values
aligned_dominance
components <- list(
set1 = "TOC",
set2 = "Clay",
set3 = "Water_content",
set4 = "SR",
set5 = "AI",
set6 = "Peak_A"
)
aligned_dominance$Variables <- list(
set1 = "TOC",
set2 = "Clay",
set3 = "Water_content",
set4 = "SR",
set5 = "AI",
set6 = "Peak_A"
)
View(aligned_dominance)
# Plotting
ggplot(aligned_dominance, aes(x = Variables, y = Standardized)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Estimate"
) +
coord_flip() +  # Horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Estimate >= 0, round(Estimate, 2), -round(Estimate, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(variable_coefs$Estimate >= 0, 0, 0),
color = "black", hjust = ifelse(variable_coefs$Estimate >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
# Plotting
ggplot(aligned_dominance, aes(x = Variables, y = Standardized)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
) +
coord_flip() +  # Horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
ggplot(aligned_dominance, aes(x = Variables, y = Standardized)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
) +
coord_flip() +  # Horizontal bars
theme_minimal()
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
) +
coord_flip() +  # Horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
ggplot(aligned_dominance, aes(x = Standardized, y = Variables)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
)
ggplot(aligned_dominance, aes(x = Standardized, y = Variables)) +
geom_bar(stat = "identity", fill = "grey", color = "black")
class(aligned_dominance)
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables))+
geom_bar
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables))+
geom_bar()
# Plotting
ggplot(aligned_dominance, x = Standardized, y = Variables)+
geom_bar()
# Plotting
ggplot(aligned_dominance, (x = Standardized, y = Variables))+
geom_bar()
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables))+
geom_bar()
# Plotting
ggplot(aligned_dominance, aes(x = Standardized))+
geom_bar()
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Ranks))+
geom_bar()
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Ranks))+
geom_bar(stat = "identity")
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variable))+
geom_bar(stat = "identity")
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables))+
geom_bar(stat = "identity")
ggplot(aligned_dominance, aes(x = Standardized, y = "Variables")) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
) +
coord_flip() +  # Horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
ggplot(aligned_dominance, aes(y = Standardized, x = "Variables")) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
) +
coord_flip() +  # Horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = "Variables"))+
geom_bar(stat = "identity")
# Plotting
ggplot(aligned_dominance, aes(x = Standardized))+
geom_bar(stat = "identity")
# Plotting
ggplot(aligned_dominance, aes(x = Standardized))+
geom_bar()
# Plotting
ggplot(aligned_dominance, aes(x = Standardized))+
geom_bar()+
coord_flip()
# Plotting
aligned_dominance <- aligned_dominance[,-c(2)]
aligned_dominance
ggplot(aligned_dominance, aes(x = Standardized))+
geom_bar()+
coord_flip()
components <- list(
set1 = "TOC",
set2 = "Clay",
set3 = "Water_content",
set4 = "SR",
set5 = "AI",
set6 = "Peak_A"
)
aligned_dominance$Variables <- components
aligned_dominance <- as.dataframe(aligned_dominance)
aligned_dominance <- as.data.frame(aligned_dominance)
# Plotting
ggplot(aligned_dominance, aes(x = Standardized))+
geom_bar()+
coord_flip()
# Plotting
ggplot(aligned_dominance, aes(x = "Standardized", y = "Variables"))+
geom_bar(stat= "identity")+
coord_flip()
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = "Variables"))+
geom_bar(stat= "identity")+
coord_flip()
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables))+
geom_bar(stat= "identity")+
coord_flip()
components <- as.data.frame(
set1 = "TOC",
set2 = "Clay",
set3 = "Water_content",
set4 = "SR",
set5 = "AI",
set6 = "Peak_A"
)
components <- as.data.frame("TOC","Clay","Water_content","SR","AI","Peak_A")
components <- as.data.frame(c("TOC","Clay","Water_content","SR","AI","Peak_A"))
components
components$Variable <- as.data.frame(c("TOC","Clay","Water_content","SR","AI","Peak_A"))
components$Variable
components <- df()
components <- data.frame(Variables = c("TOC","Clay","Water_content","SR","AI","Peak_A"))
components
aligned_dominance
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(dominance_data)
# Displaying the aligned dominance values
aligned_dominance
components <- data.frame(Variables = c("TOC","Clay","Water_content","SR","AI","Peak_A"))
components
components$Ranks <- seq.int(nrow(components))
components
# aligned_dominance$Variables <- components
aligned_dominance <- merge(aligned_dominance, components, by="Ranks")
aligned_dominance
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(dominance_data)
# Displaying the aligned dominance values
aligned_dominance
components <- data.frame(Variables = c("TOC","Clay","Water_content","SR","AI","Peak_A"))
components$Ranks <- seq.int(nrow(components))
# aligned_dominance$Variables <- components
aligned_dominance <- merge(aligned_dominance, components, by="Ranks")
aligned_dominance
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(dominance_data)
# Displaying the aligned dominance values
aligned_dominance
components <- data.frame(Variables = c("TOC","Clay","Water_content","SR","AI","Peak_A"))
# aligned_dominance$Variables <- components
aligned_dominance <- merge(aligned_dominance, components)
aligned_dominance
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(dominance_data)
# Displaying the aligned dominance values
aligned_dominance
components <- data.frame(Variables = c("TOC","Clay","Water_content","SR","AI","Peak_A"))
# aligned_dominance$Variables <- components
aligned_dominance <- cbind(aligned_dominance, components)
aligned_dominance
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables))+
geom_bar(stat= "identity")+
coord_flip()
ggplot(aligned_dominance, aes(x = Standardized, y = Variables)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
) +
coord_flip() +  # Horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
ggplot(aligned_dominance, aes(y = Standardized, x = Variables)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
) +
coord_flip() +  # Horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
ggplot(aligned_dominance, aes(x = Standardized, y = Variables)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
x = "Predictor Variables",
y = "Standardized"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
ggplot(aligned_dominance, aes(x = Standardized, y = Variables)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
y = "Predictor Variables",
x = "Standardized"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
library("ggplot2")
library("scales")
library("tidyr")
library("dplyr")
library("ggpmisc")
library("ggpubr")
library("plotly")
library(plyr)
library(RColorBrewer)
library(devtools)
# install_github("vqv/ggbiplot")
library(ggbiplot)
library(vegan)
library(FSA)
library(rcompanion)
# New Liner mixed model ####
library(lme4)
library(car)
# remotes::install_version("MuMIn", "1.46.0")
library(MuMIn)
library(cAIC4)
library(domir)
my_data         = read.csv("SP_metadata_2021.csv", sep=";")
my_data$LTC_LTN <- my_data$L_TC/my_data$L_TN
my_data$xylcbh <- my_data$xyl + my_data$cbh
my_data$alphabeta <- my_data$alpha + my_data$beta
#To replace NA values with a mean of the other values of the Site:
for (i in which(sapply(my_data, is.numeric))) {
for (j in which(is.na(my_data[, i]))) {
my_data[j, i] <- mean(my_data[my_data[, "Site"] == my_data[j, "Site"], i],  na.rm = TRUE)
}
}
ggplot(my_data, aes(x=as.factor(AI), y=Soil_Temp, fill=as.factor(AI))) +
geom_boxplot(alpha=0.7)
plot(my_data$AI,my_data$Soil_Temp)
ggplot(my_data, aes(x=as.factor(AI), y=Water_activity, fill=as.factor(AI))) +
geom_boxplot(alpha=0.7)
a               = as.data.frame(colnames(my_data))
max_values      = apply(my_data[,c(8,10,13,20,22,30,76,81,82,83,85,92,21,23)],2,max)
my_data.1       = as.data.frame(cbind(my_data[,c(2,64,46,47,48,49,50,51,52,53,7,9,17,18,19,27,28,29,33,34,40,41,86,87,88,89,90,91,74)],
my_data[,c(8,10,13,20,22,30,76,81,82,83,85,92,21,23)] / as.list(max_values)))
a.1             = as.data.frame(colnames(my_data.1))
corr            = as.data.frame(cor(my_data.1[,12:43]))
my_data.1 <-my_data.1 %>%
mutate(Cenz = select(., 3:6) %>% rowSums(na.rm = TRUE)) %>%
mutate(MB = select(.,21:22) %>% rowSums(na.rm = TRUE))
MB.full.4 = lmer(MB ~ TOC+Clay+Water_content+SR+Peak_A+AI+
(1|Site), data = my_data.1)
#CHANGE SIGN OF THE DOMINANCE VALUES
dominance_output <- domin(MB ~ 1,
lmer,
list(\(x) list(R2m = MuMIn::r.squaredGLMM(x)[[1]]), "R2m"),
data = my_data.1,
sets = list("TOC","Clay","Water_content","SR","AI","Peak_A"),
consmodel = "(1|Site)") # Replace with your actual function
# Extracting General Dominance Standardized Ranks
general_dominance <- dominance_output$Standardized
general_dominance_ranks <- dominance_output$Ranks
dominance_data <- dominance_data[order(dominance_data$Ranks), ]
general_dominance
general_dominance_ranks
dominance_data <- general_dominance_ranks[order(general_dominance_ranks$Ranks), ]
dominance_data$Ranks <- general_dominance_ranks
dominance_data <- data.frame(Standardized = general_dominance)
dominance_data$Ranks <- general_dominance_ranks
dominance_data
dominance_data <- dominance_data[order(dominance_data$Ranks), ]
dominance_data
# Extracting estimates from the summary output
estimates <- summary(MB.full.4)$coefficients[, "Estimate"][-1]  # Exclude intercept
# Automatically aligning signs of General Dominance Standardized Ranks with Estimate values
aligned_dominance <- sign(estimates) * abs(dominance_data)
# Displaying the aligned dominance values
aligned_dominance
components <- data.frame(Variables = c("TOC","Clay","Water_content","SR","AI","Peak_A"))
# aligned_dominance$Variables <- components
aligned_dominance <- cbind(aligned_dominance, components)
aligned_dominance
# Plotting
ggplot(aligned_dominance, aes(x = Standardized, y = Variables)) +
geom_bar(stat = "identity", fill = "grey", color = "black") +
labs(
y = "Predictor Variables",
x = "Standardized"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(Standardized >= 0, round(Standardized, 2), -round(Standardized, 2))),
position = position_dodge(width = 0.9), vjust = ifelse(aligned_dominance$Standardized >= 0, 0, 0),
color = "black", hjust = ifelse(aligned_dominance$Standardized >= 0, -0.3, 1.2)) +  # Adjust label position
ggtitle("Coefficients for Predictor Variables") +
theme(legend.position = "none")  # Remove the legend
